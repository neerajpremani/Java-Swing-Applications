/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.supplier.approverrole;

import business.EcoSystem;
import business.drug.Drug;
import business.enterprise.ChemistEnterprise;
import business.enterprise.Enterprise;
import business.enterprise.HospitalEnterprise;
import business.enterprise.SupplierEnterprise;
import business.network.Network;
import business.organization.Organization;
import business.organization.hospital.DoctorOrganization;
import business.organization.supplier.ApproverOrganization;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import business.workqueue.WorkRequestDrugs;
import commonutils.Constants;
import commonutils.email.SendEmail;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NEERAJ PREMANI
 */
public class RequestBidOrSendSupplier extends javax.swing.JPanel {

    /**
     * Creates new form RequestBidOrSendSupplier
     */
    private JPanel userProcessContainer;
    private ApproverOrganization organization;
    private SupplierEnterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem ecosystem;
    private WorkRequestDrugs request;
    private Network network;
    private Map<String, int[]> requestOrSend;

    public RequestBidOrSendSupplier(JPanel userProcessContainer, WorkRequestDrugs request, Map<String, int[]> requestOrSend, Boolean bidFlag,
            EcoSystem system, Network network, SupplierEnterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        this.ecosystem = system;
        this.network = network;
        this.enterprise = enterprise;
        if (bidFlag == Boolean.TRUE) {
            messageLabel.setText("Inventory is low, please request bid");
            requestBid.setEnabled(true);
            sendToChemist.setEnabled(false);
        } else {
            messageLabel.setText("Request can be full filled");
            requestBid.setEnabled(false);
            sendToChemist.setEnabled(true);
        }
        this.requestOrSend = requestOrSend;
        populateRequestTable(this.requestOrSend);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        requestBid = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        sendToChemist = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        backJButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        kGradientPanel1.setkEndColor(new java.awt.Color(102, 204, 255));
        kGradientPanel1.setkStartColor(new java.awt.Color(183, 248, 230));
        kGradientPanel1.setPreferredSize(new java.awt.Dimension(1200, 750));
        kGradientPanel1.setLayout(null);

        workRequestJTable.setBackground(new java.awt.Color(153, 255, 255));
        workRequestJTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        workRequestJTable.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Drug Name", "Inventory Count", "Order Count", "Request Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setGridColor(new java.awt.Color(0, 0, 0));
        workRequestJTable.setSelectionBackground(new java.awt.Color(153, 255, 255));
        workRequestJTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(workRequestJTable);

        kGradientPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(144, 202, 669, 245);

        requestBid.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        requestBid.setText("Request Bid");
        requestBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestBidActionPerformed(evt);
            }
        });
        kGradientPanel1.add(requestBid);
        requestBid.setBounds(130, 470, 150, 31);

        title.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        title.setText("Decision Screen");
        title.setAlignmentX(740.0F);
        title.setAlignmentY(245.0F);
        kGradientPanel1.add(title);
        title.setBounds(150, 70, 553, 32);

        sendToChemist.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sendToChemist.setText("Send To Chemist");
        sendToChemist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToChemistActionPerformed(evt);
            }
        });
        kGradientPanel1.add(sendToChemist);
        sendToChemist.setBounds(660, 470, 180, 31);

        messageLabel.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        messageLabel.setForeground(new java.awt.Color(255, 255, 0));
        kGradientPanel1.add(messageLabel);
        messageLabel.setBounds(100, 120, 420, 20);

        backJButton1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        backJButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/arrow-back-icon_1_40x40.png"))); // NOI18N
        backJButton1.setContentAreaFilled(false);
        backJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton1ActionPerformed(evt);
            }
        });
        kGradientPanel1.add(backJButton1);
        backJButton1.setBounds(20, 40, 50, 40);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/supp.jpg"))); // NOI18N
        jLabel5.setText("jLabel2");
        kGradientPanel1.add(jLabel5);
        jLabel5.setBounds(-50, -50, 2120, 1266);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 984, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 807, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestBidActionPerformed
        // Send bid request to Manufacturer
        request.getEnterpriseStack().add(this.enterprise);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("ChooseManufacturer", new AssignToManufacturer(userProcessContainer, ecosystem, request, enterprise, requestOrSend));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_requestBidActionPerformed

    private void sendToChemistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToChemistActionPerformed
        //Update inventory of chemist
        ChemistEnterprise chemistEnterprise = null;
        SupplierEnterprise supplierEnterprise = enterprise;
        for (Enterprise enterprise : request.getEnterpriseStack()) {
            if (enterprise instanceof ChemistEnterprise) {
                chemistEnterprise = (ChemistEnterprise) enterprise;
            }
        }
        if (chemistEnterprise != null) {
            List<Drug> drugInventoryStock = chemistEnterprise.getInventory().getDrugStock();
            List<Drug> drugInventoryStockSupplier = supplierEnterprise.getInventory().getDrugStock();
            List<Drug> drugOrder = request.getDrugsOrderList();
            for (Drug drug : drugOrder) {
                Drug drugInv = drugInventoryStock.stream().filter(drugIn -> (drug.getName()).equals(drugIn.getName()))
                        .findAny()
                        .orElse(null);

                Drug drugInvSupp = drugInventoryStockSupplier.stream().filter(drugInsup -> (drug.getName()).equals(drugInsup.getName()))
                        .findAny()
                        .orElse(null);
//                if (drugInv != null) {
//                    drugInv.setQuantity(drugInv.getQuantity() + drug.getQuantity());
//                } else {
//                    drugInventoryStock.add(drug);
//                }
                if(drugInv==null)
                {
                    drugInventoryStock.add(drug);
                }
                if (drugInvSupp != null) {
                    drugInvSupp.setQuantity(drugInvSupp.getQuantity() - drug.getQuantity());
                }
            }
            //Delete this order from all queues.
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof ApproverOrganization) {
                    //Remove the workrequest from this queue
                    organization.getWorkQueue().deleteWorkRequest(request);
                }
            }
            request.setStatus(Constants.resentToChemist);
            JOptionPane.showMessageDialog(null, "Order is completed");
            userProcessContainer.remove(this);
            Component[] componentArray = userProcessContainer.getComponents();
            Component component = componentArray[componentArray.length - 1];
            ApproverWorkAreaJPanel approverworkAreaJPanel = (ApproverWorkAreaJPanel) component;
            approverworkAreaJPanel.populateRequestTable();
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.previous(userProcessContainer);

            List<String> emailIDList = new ArrayList<>();
            for (Organization organization : chemistEnterprise.getOrganizationDirectory().getOrganizationList()) {
                for (UserAccount userAccount : organization.getUserAccountDirectory().getUserAccountListValues()) {
                    emailIDList.add(userAccount.getEmailID());
                }
            }
            List<String> emailIDListPatient = new ArrayList<>();
//            HospitalEnterprise hpenterprise = (HospitalEnterprise) enterprise;
            for (Enterprise entp : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (entp instanceof HospitalEnterprise) {
                    for (Organization organization : entp.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof DoctorOrganization) {
                            for (WorkRequest wreqEmail : organization.getWorkQueue().getWorkRequestList()) {
                                if (wreqEmail.getRequestId().equals(request.getRequestId())) {
                                    emailIDListPatient.add(wreqEmail.getSender().getEmailID());
                                    System.out.println("Emails" + emailIDList);
                                    System.out.println("Emails Patients " + emailIDListPatient);
                                }
                            }
                        }

                    }
                }
            }
            //Send email to user with password.
            ExecutorService executor = Executors.newSingleThreadExecutor();

            Runnable runnableTask = () -> {
                try {
                    System.out.println("Executor task started");
                    SendEmail sendEmail = new SendEmail();
                    sendEmail.sendMailMulti(request, emailIDList);
                    sendEmail.sendMailMulti(request, emailIDListPatient);
                } catch (Exception exception) {
                    //JOptionPane.showMessageDialog(null, "We were unable to send mail to the desired recepient! Please contact system administrator");
                    exception.printStackTrace();
                }
            };

            executor.execute(runnableTask);

            executor.shutdown();

        } else {
            request.setStatus(Constants.orderCannotBeFullfilled);
            JOptionPane.showMessageDialog(null, "Order Cannot be fulfilled");
            userProcessContainer.remove(this);
            Component[] componentArray = userProcessContainer.getComponents();
            Component component = componentArray[componentArray.length - 1];
            ApproverWorkAreaJPanel approverworkAreaJPanel = (ApproverWorkAreaJPanel) component;
            approverworkAreaJPanel.populateRequestTable();
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.previous(userProcessContainer);
        }

    }//GEN-LAST:event_sendToChemistActionPerformed

    private void backJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton1ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton1ActionPerformed

    public void disableButton() {
        requestBid.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton requestBid;
    private javax.swing.JButton sendToChemist;
    private javax.swing.JLabel title;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    private void populateRequestTable(Map<String, int[]> requestOrSend) {
        workRequestJTable.getTableHeader().setFont(new Font("Segoe UI", 1, 20));
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        for (Map.Entry<String, int[]> entry : requestOrSend.entrySet()) {
            Object[] row = new Object[4];
            row[0] = entry.getKey();
            int[] countArray = entry.getValue();
            row[1] = countArray[0];
            row[2] = countArray[1];
            row[3] = countArray[2];
            model.addRow(row);
        }
    }
}
