/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.chemist.workerrole;

import business.PatientRequest.PatientRequest;
import business.drug.Drug;
import business.enterprise.Enterprise;
import business.organization.Organization;
import business.organization.chemist.ManagerOrganization;
import business.organization.chemist.WorkerOrganization;
import business.organization.hospital.DoctorOrganization;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import business.workqueue.WorkRequestDoctor;
import business.workqueue.WorkRequestDrugs;
import commonutils.Constants;
import java.awt.CardLayout;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author JAINHEMANT
 */
public class WorkerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form WorkerWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private WorkerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private static final Logger log = LogManager.getLogger(WorkerWorkAreaJPanel.class);

    public WorkerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, WorkerOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        
        jComboBoxFilter.removeAllItems();
        jComboBoxFilter.addItem("All");
        jComboBoxFilter.addItem(Constants.chemistCoworkerRequestCreated);
        jComboBoxFilter.addItem(Constants.chemistCoworkerSendForApproval);
        jComboBoxFilter.addItem(Constants.ManagerApprove);
        jComboBoxFilter.addItem(Constants.ManagerReject);
        jComboBoxFilter.addItem(Constants.sentToSupplier);
        jComboBoxFilter.addItem(Constants.sentToLegal);
        jComboBoxFilter.addItem(Constants.rejectedByLegal);
        jComboBoxFilter.addItem(Constants.acceptedByLegal);
        jComboBoxFilter.addItem(Constants.requestBid);
        jComboBoxFilter.addItem(Constants.resentToChemist);
        jComboBoxFilter.addItem(Constants.sentToManufacturer);
        jComboBoxFilter.addItem(Constants.priceUpdatedByManufacturer);
        jComboBoxFilter.addItem(Constants.processedByManufacturer);
        jComboBoxFilter.addItem(Constants.orderCannotBeFullfilled);
        this.setSize(1200, 750);
        ((DefaultTableCellRenderer) workRequestJTable.getDefaultRenderer(Object.class)).setOpaque(false);
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);

        title.setText("Chemist Worker: " + userAccount.getUsername());
        workRequestJTable.setSize(300, 64);
        populateRequestTable();

    }

    public void populateRequestTable() {
        workRequestJTable.getTableHeader().setFont(new Font("Segoe UI", 1, 20));

        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        Organization org = null;
            for (Organization organization1 : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization1 instanceof WorkerOrganization) {
                    org = organization1;
                    break;
                }      
        
            }    
            
            System.out.println("Worker Area:  "+org.getWorkQueue().getWorkRequestList());
        for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
            WorkRequestDrugs workRequestDrugs = (WorkRequestDrugs) request;
            Object[] row = new Object[4];
            row[0] = workRequestDrugs;
            row[1] = workRequestDrugs.getStatus();
            row[2] = workRequestDrugs.getReceiver();
            row[3] = workRequestDrugs.getMessage();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        viewRequest = new javax.swing.JButton();
        send = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        jComboBoxFilter = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        assignToMe = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1200, 750));

        kGradientPanel1.setkEndColor(new java.awt.Color(102, 204, 255));
        kGradientPanel1.setkStartColor(new java.awt.Color(183, 248, 230));
        kGradientPanel1.setPreferredSize(new java.awt.Dimension(1200, 750));
        kGradientPanel1.setLayout(null);

        workRequestJTable.setBackground(new java.awt.Color(153, 255, 255));
        workRequestJTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        workRequestJTable.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Request ID", "Status", "Reciever", "Message"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setGridColor(new java.awt.Color(0, 0, 0));
        workRequestJTable.setSelectionBackground(new java.awt.Color(153, 255, 255));
        workRequestJTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        kGradientPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(103, 141, 744, 286);

        viewRequest.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewRequest.setText("View Request");
        viewRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRequestActionPerformed(evt);
            }
        });
        kGradientPanel1.add(viewRequest);
        viewRequest.setBounds(370, 440, 150, 31);

        send.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        send.setText("Send for Approval");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });
        kGradientPanel1.add(send);
        send.setBounds(700, 440, 175, 31);

        title.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        title.setText("Title");
        title.setAlignmentX(740.0F);
        title.setAlignmentY(245.0F);
        kGradientPanel1.add(title);
        title.setBounds(110, 50, 740, 48);

        jComboBoxFilter.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFilterActionPerformed(evt);
            }
        });
        kGradientPanel1.add(jComboBoxFilter);
        jComboBoxFilter.setBounds(190, 490, 100, 28);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Filter Status By:");
        kGradientPanel1.add(jLabel2);
        jLabel2.setBounds(40, 490, 150, 22);

        assignToMe.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignToMe.setText("Assign To Me");
        assignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToMeActionPerformed(evt);
            }
        });
        kGradientPanel1.add(assignToMe);
        assignToMe.setBounds(100, 440, 180, 31);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/worker.jpg"))); // NOI18N
        kGradientPanel1.add(jLabel5);
        jLabel5.setBounds(-630, -20, 1830, 940);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
//        if (!(request.getStatus().equals(Constants.ManagerApprove) || request.getStatus().equals(Constants.chemistCoworkerSendForApproval))) {
        if (request.getStatus().equals(Constants.ManagerReject) || request.getStatus().equals(Constants.chemistCoworkerRequestCreated)
                || request.getStatus().equals(Constants.rejectedByLegal) || request.getStatus().equals(Constants.orderCannotBeFullfilled)) {
            Organization org = null;
            if(request.getReceiver()==userAccount)
            {
                request.setReceiver(null);
            }
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof ManagerOrganization) {
                    org = organization;
                    org.getWorkQueue().getWorkRequestList().add(request);
                }
            }
            request.setStatus(Constants.chemistCoworkerSendForApproval);
            log.info("Request send for Manager's Approval");
            populateRequestTable();
        } else {
            JOptionPane.showMessageDialog(null, "Already request send");
            return;
        }

    }//GEN-LAST:event_sendActionPerformed

    private void viewRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRequestActionPerformed
        log.info("View Order");
        int selectedRow = workRequestJTable.getSelectedRow();
        boolean orderProc = false;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }
        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        if ((Constants.resentToChemist).equals(request.getStatus())) {
            orderProc = true;
        }
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("viewEditDrug", new ViewEditDrugsOrderJpanel(userProcessContainer, request, orderProc));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewRequestActionPerformed

    private void jComboBoxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFilterActionPerformed
        // TODO add your handling code here:
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(((DefaultTableModel) workRequestJTable.getModel()));
        if (jComboBoxFilter.getSelectedItem() != null) {
            if (!jComboBoxFilter.getSelectedItem().toString().equalsIgnoreCase("All")) {
                sorter.setRowFilter(RowFilter.regexFilter(jComboBoxFilter.getSelectedItem().toString()));
                workRequestJTable.setRowSorter(sorter);
            } else {
                workRequestJTable.setRowSorter(null);
            }
        }

    }//GEN-LAST:event_jComboBoxFilterActionPerformed

    private void assignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToMeActionPerformed
    
        log.info("Request Assign to Worker");
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }          

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getReceiver() == null) {
            if ((Constants.chemistCoworkerRequestCreated).equals(request.getStatus())) {
                request.setReceiver(userAccount);
                populateRequestTable();
            } else {
                JOptionPane.showMessageDialog(null, "Request is already processed");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Already assinged to " + request.getReceiver());
            return;
        }
        
        //   System.out.println(patientList);

    }//GEN-LAST:event_assignToMeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignToMe;
    private javax.swing.JComboBox jComboBoxFilter;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JButton send;
    private javax.swing.JLabel title;
    private javax.swing.JButton viewRequest;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
