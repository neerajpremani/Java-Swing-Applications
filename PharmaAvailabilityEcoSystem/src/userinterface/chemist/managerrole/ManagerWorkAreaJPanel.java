/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.chemist.managerrole;

import business.EcoSystem;
import business.drug.Drug;
import business.enterprise.ChemistEnterprise;
import business.enterprise.Enterprise;
import business.enterprise.SupplierEnterprise;
import business.inventory.Inventory;
import business.network.Network;
import business.organization.chemist.ManagerOrganization;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import business.workqueue.WorkRequestDrugs;
import commonutils.Constants;
import java.awt.CardLayout;
import java.awt.Font;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import userinterface.analysis.showAnalysisJpanel;

/**
 *
 * @author jaysh
 */
public class ManagerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagerWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private ManagerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem ecosystem;
    private Network network;
    private static final Logger log = LogManager.getLogger(ManagerWorkAreaJPanel.class);

    public ManagerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, ManagerOrganization organization, Enterprise enterprise, EcoSystem ecosystem, Network network) {
        initComponents();
        jComboBoxFilter.removeAllItems();
        jComboBoxFilter.addItem("All");
        jComboBoxFilter.addItem(Constants.chemistCoworkerSendForApproval);
        jComboBoxFilter.addItem(Constants.ManagerApprove);
        jComboBoxFilter.addItem(Constants.ManagerReject);
        jComboBoxFilter.addItem(Constants.sentToSupplier);
        jComboBoxFilter.addItem(Constants.sentToLegal);
        jComboBoxFilter.addItem(Constants.rejectedByLegal);
        jComboBoxFilter.addItem(Constants.acceptedByLegal);
        jComboBoxFilter.addItem(Constants.requestBid);
        jComboBoxFilter.addItem(Constants.resentToChemist);
        jComboBoxFilter.addItem(Constants.sentToManufacturer);
        jComboBoxFilter.addItem(Constants.priceUpdatedByManufacturer);
        jComboBoxFilter.addItem(Constants.processedByManufacturer);
        jComboBoxFilter.addItem(Constants.orderCannotBeFullfilled);
        this.setSize(1200, 750);
        ((DefaultTableCellRenderer) workRequestJTable.getDefaultRenderer(Object.class)).setOpaque(false);
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.ecosystem = ecosystem;
        this.network=network;
        title.setText("Chemist Manager: " + userAccount.getUsername());
        populateRequestTable();
    }

    public void populateRequestTable() {
         workRequestJTable.getTableHeader().setFont(new Font("Segoe UI", 1, 20));
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            WorkRequestDrugs workRequestDrugs = (WorkRequestDrugs) request;
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getStatus();
            row[2] = request.getSender();
            row[3] = request.getReceiver();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignToMe = new javax.swing.JButton();
        viewRequest = new javax.swing.JButton();
        reject = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        approve = new javax.swing.JButton();
        showStatisticsButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxFilter = new javax.swing.JComboBox();
        requestOrSend = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        kGradientPanel1.setkEndColor(new java.awt.Color(102, 204, 255));
        kGradientPanel1.setkStartColor(new java.awt.Color(183, 248, 230));
        kGradientPanel1.setPreferredSize(new java.awt.Dimension(1200, 750));
        kGradientPanel1.setLayout(null);

        workRequestJTable.setBackground(new java.awt.Color(153, 255, 255));
        workRequestJTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        workRequestJTable.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Request ID", "Status", "Sender", "Receiver"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setGridColor(new java.awt.Color(0, 0, 0));
        workRequestJTable.setSelectionBackground(new java.awt.Color(153, 255, 255));
        workRequestJTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        kGradientPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(148, 156, 669, 245);

        assignToMe.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        assignToMe.setText("Assign To Me");
        assignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToMeActionPerformed(evt);
            }
        });
        kGradientPanel1.add(assignToMe);
        assignToMe.setBounds(148, 411, 220, 31);

        viewRequest.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewRequest.setText("View");
        viewRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRequestActionPerformed(evt);
            }
        });
        kGradientPanel1.add(viewRequest);
        viewRequest.setBounds(150, 490, 220, 31);

        reject.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        reject.setText("Reject");
        reject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectActionPerformed(evt);
            }
        });
        kGradientPanel1.add(reject);
        reject.setBounds(600, 460, 220, 31);

        title.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        title.setText("Title");
        title.setAlignmentX(740.0F);
        title.setAlignmentY(245.0F);
        kGradientPanel1.add(title);
        title.setBounds(170, 80, 580, 32);

        approve.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        approve.setText("Approve");
        approve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveActionPerformed(evt);
            }
        });
        kGradientPanel1.add(approve);
        approve.setBounds(600, 420, 220, 31);

        showStatisticsButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        showStatisticsButton.setText("Show Statistics");
        showStatisticsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showStatisticsButtonActionPerformed(evt);
            }
        });
        kGradientPanel1.add(showStatisticsButton);
        showStatisticsButton.setBounds(150, 450, 220, 31);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Filter Status By:");
        kGradientPanel1.add(jLabel2);
        jLabel2.setBounds(160, 570, 130, 22);

        jComboBoxFilter.setEditable(true);
        jComboBoxFilter.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFilterActionPerformed(evt);
            }
        });
        kGradientPanel1.add(jComboBoxFilter);
        jComboBoxFilter.setBounds(290, 570, 169, 28);

        requestOrSend.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        requestOrSend.setText("Request Supplier OR Send To Chemist Worker");
        requestOrSend.setMaximumSize(new java.awt.Dimension(129, 29));
        requestOrSend.setMinimumSize(new java.awt.Dimension(129, 29));
        requestOrSend.setPreferredSize(new java.awt.Dimension(129, 29));
        requestOrSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestOrSendActionPerformed(evt);
            }
        });
        kGradientPanel1.add(requestOrSend);
        requestOrSend.setBounds(600, 510, 450, 60);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/chem.jpg"))); // NOI18N
        jLabel5.setText("jLabel5");
        kGradientPanel1.add(jLabel5);
        jLabel5.setBounds(-390, -110, 1710, 1100);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1194, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToMeActionPerformed

        log.info("Request Assign o manager");
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getReceiver() == null) {
            if ((Constants.chemistCoworkerSendForApproval).equals(request.getStatus())) {
                request.setReceiver(userAccount);
                populateRequestTable();
            } else {
                JOptionPane.showMessageDialog(null, "Request is processed");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Already assinged to " + request.getReceiver());
            return;
        }
    }//GEN-LAST:event_assignToMeActionPerformed

    private void viewRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRequestActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("viewEditDrug", new ViewOrderjpanel(userProcessContainer, request, enterprise));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewRequestActionPerformed

    private void rejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        if ((Constants.chemistCoworkerSendForApproval).equals(request.getStatus())) {
            if (request.getReceiver() == userAccount) {
                request.setStatus(Constants.ManagerReject);
                JFrame frame = new JFrame();
                String message = (String) JOptionPane.showInputDialog(frame,
                        "Enter the message",
                        Constants.ManagerReject + " message",
                        JOptionPane.OK_CANCEL_OPTION);
                request.setMessage(message);

                organization.getWorkQueue().getWorkRequestList().remove(request);
                populateRequestTable();
            } else {
                JOptionPane.showMessageDialog(null, "Assign request to you.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Request is processed");
        }

        //WorkRequestDrugs wr= request.getSender().getWorkQueue().getWorkRequestList().stream().filter(x -> x==request).findFirst().get();
    }//GEN-LAST:event_rejectActionPerformed

    private void approveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveActionPerformed
        // TODO add your handling code here:
        log.info("Request Approved by manager");
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getReceiver() == userAccount) {
            if (!request.getStatus().equalsIgnoreCase(Constants.ManagerApprove)) {
                request.setStatus(Constants.ManagerApprove);
                JFrame frame = new JFrame();
                String message = (String) JOptionPane.showInputDialog(frame,
                        "Enter the message",
                        Constants.ManagerApprove + " message",
                        JOptionPane.OK_CANCEL_OPTION);
                request.setMessage(message);
                populateRequestTable();
            } else {
                JOptionPane.showMessageDialog(null, "Request already approved.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Assign request to you.");
        }
    }//GEN-LAST:event_approveActionPerformed

    private void showStatisticsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showStatisticsButtonActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        ChemistEnterprise chemistEnterprise = (ChemistEnterprise) enterprise;
        userProcessContainer.add("showStatistics", new showAnalysisJpanel(userProcessContainer, chemistEnterprise.getInventory()));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_showStatisticsButtonActionPerformed

    private void jComboBoxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFilterActionPerformed
        // TODO add your handling code here:
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(((DefaultTableModel) workRequestJTable.getModel()));
        if (jComboBoxFilter.getSelectedItem() != null) {
            if (!jComboBoxFilter.getSelectedItem().toString().equalsIgnoreCase("All")) {
                sorter.setRowFilter(RowFilter.regexFilter(jComboBoxFilter.getSelectedItem().toString()));
                workRequestJTable.setRowSorter(sorter);
            } else {
                workRequestJTable.setRowSorter(null);
            }
        }
    }//GEN-LAST:event_jComboBoxFilterActionPerformed

    private void requestOrSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestOrSendActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }
        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getReceiver() == userAccount) {

            if (!Constants.resentToChemist.equals(request.getStatus())) {
              //  if (Constants.acceptedByLegal.equals(request.getStatus()) || Constants.processedByManufacturer.equals(request.getStatus())) {
                    ChemistEnterprise chemistEnterprise = (ChemistEnterprise) enterprise;
                    Inventory inventorySupp = chemistEnterprise.getInventory();
                    List<Drug> inventory = inventorySupp.getDrugStock();
                    List<Drug> drugsOrderList = request.getDrugsOrderList();
                    Map<String, int[]> requestOrSend = new HashMap<>();
                    Boolean bidFlag = false;
                    drugsOrderList.stream().forEach(drug -> requestOrSend.put(drug.getName(), new int[]{0, drug.getQuantity(), 0}));
                    for (Map.Entry<String, int[]> entry : requestOrSend.entrySet()) {
                        int[] countArray = entry.getValue();
                        Drug drug = inventory.stream()
                        .filter(drugIn -> entry.getKey().equals(drugIn.getName()))
                        .findAny()
                        .orElse(null);
                        if (drug != null) {
                            countArray[0] = drug.getQuantity();
                        }
                        countArray[2] = countArray[1] - countArray[0];
                        if (countArray[2] < 0) {
                            countArray[2] = 0;
                        } else if (countArray[2] > 0) {
                            bidFlag = true;
                        }

                    }

                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    userProcessContainer.add("RequestSupplier", new RequestSupplierOrSendChemistWorker(userProcessContainer, request, requestOrSend, bidFlag,
                        ecosystem,enterprise,network));
                layout.next(userProcessContainer);
           // } 
        } else {
            JOptionPane.showMessageDialog(null, "Order Completed");
            return;
        }
        } else {
            JOptionPane.showMessageDialog(null, "Assign request to you.");
            return;
        }
    }//GEN-LAST:event_requestOrSendActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approve;
    private javax.swing.JButton assignToMe;
    private javax.swing.JComboBox jComboBoxFilter;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JButton reject;
    private javax.swing.JButton requestOrSend;
    private javax.swing.JButton showStatisticsButton;
    private javax.swing.JLabel title;
    private javax.swing.JButton viewRequest;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
