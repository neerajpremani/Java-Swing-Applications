/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.hospital.patientrole;

import business.EcoSystem;
import business.PatientRequest.PatientRequest;
import business.employee.Employee;
import business.enterprise.Enterprise;
import business.enterprise.HospitalEnterprise;
import business.organization.Organization;
import business.organization.chemist.ManagerOrganization;
import business.organization.hospital.DoctorOrganization;
import business.organization.hospital.PatientOrganization;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import static business.workqueue.WorkRequest.workRequestType.PatientRequests;
import business.workqueue.WorkRequestDoctor;
import business.workqueue.WorkRequestDrugs;
import commonutils.Constants;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import userinterface.chemist.managerrole.AssignToSupplier;
import userinterface.chemist.workerrole.WorkerWorkAreaJPanel;
import userinterface.hospital.doctorrole.DoctorWorkAreaJPanel;
import userinterface.hospital.doctorrole.ViewChemistRequestJPanel;
import userinterface.hospital.doctorrole.ViewPatientRequestJPanel;

/**
 *
 * @author JAINHEMANT
 */
public class PatientWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private PatientOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem ecosystem;
    private static final Logger log = LogManager.getLogger(PatientWorkAreaJPanel.class);
    List<UserAccount> orgDoctor = new ArrayList<>();
    List<UserAccount> matchedOrgDoctor = new ArrayList<>();

    /**
     * Creates new form PatientWorkAreaJPanel
     */
    public PatientWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.organization = (PatientOrganization) organization;
        this.enterprise = (HospitalEnterprise)enterprise;
        this.userAccount = account;
        doctorTable.getTableHeader().setFont(new Font("Segoe UI", 1, 20));
        populateRequests();
        //     System.out.println(organization + "  " + enterprise + "   " + userAccount);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.P1E1
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        viewHistoryBtn = new javax.swing.JButton();
        assignToMe = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(null);

        doctorTable.setBackground(new java.awt.Color(153, 255, 255));
        doctorTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        doctorTable.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Doctor ID", "Doctor Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doctorTable.setGridColor(new java.awt.Color(0, 0, 0));
        doctorTable.setSelectionBackground(new java.awt.Color(153, 255, 255));
        doctorTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(doctorTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(168, 64, 680, 245);

        viewHistoryBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewHistoryBtn.setText("View History");
        viewHistoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHistoryBtnActionPerformed(evt);
            }
        });
        add(viewHistoryBtn);
        viewHistoryBtn.setBounds(680, 330, 170, 31);

        assignToMe.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignToMe.setText("Assign To Me");
        assignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToMeActionPerformed(evt);
            }
        });
        add(assignToMe);
        assignToMe.setBounds(170, 330, 150, 31);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/patient.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        add(jLabel1);
        jLabel1.setBounds(-140, -30, 1190, 760);
    }// </editor-fold>//GEN-END:initComponents

    private void viewHistoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHistoryBtnActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("viewChemistRequest", new ViewHistoryJPanel(userProcessContainer, userAccount, organization, enterprise));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewHistoryBtnActionPerformed

    private void assignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToMeActionPerformed

        List<PatientRequest> patientList = new ArrayList<>();
        int selectedRow = doctorTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            log.info("User didn't select a row");
            return;
        }

        PatientRequest preq = new PatientRequest();

        int selectionButton = JOptionPane.YES_NO_OPTION;
        int selectionResult = JOptionPane.showConfirmDialog(null, "Assign this doctor?", "Warning", selectionButton);
        if (selectionResult == JOptionPane.YES_OPTION) {
            //can delete the network now.
            preq.setName(String.valueOf(doctorTable.getValueAt(selectedRow, 1)));
            patientList.add(preq);
            
        }

        if (!patientList.isEmpty()) {
            Organization org = null;
            for (Organization organization1 : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization1 instanceof DoctorOrganization) {
                    org = organization1;
                    break;
                }
            }
            WorkRequestDoctor wreqDoctor = (WorkRequestDoctor) org.getWorkQueue().addWorkRequestForDoctor(WorkRequest.workRequestType.PatientRequests);
            //    WorkRequestDoctor wreqDoctor1 = new WorkRequestDoctor("1");
            wreqDoctor.setSender(userAccount);
            wreqDoctor.setStatus(Constants.patientSendForApproval);
            wreqDoctor.setPatientRequestList(patientList);
            wreqDoctor.setReceiver((UserAccount) doctorTable.getValueAt(selectedRow, 1));
         //   System.out.println(wreqDoctor);
          //  System.out.println("GET WORK QUEUE IN PATIENT:  " + org.getWorkQueue().getWorkRequestList());
          
            //JOptionPane.showMessageDialog(null, "You are now assigned to Doctor " + String.valueOf(doctorTable.getValueAt(selectedRow, 1)));
            log.info("Doctor assigned to patient!");
        }
        //   System.out.println(patientList);
       populateRequests();

    
    }//GEN-LAST:event_assignToMeActionPerformed
    
    
    
    public void populateRequests() {
        Organization org1 = null;
        orgDoctor.clear();
        matchedOrgDoctor.clear();
        
        System.out.println("PopReq");
         
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            //System.out.println(emp);
            if (org instanceof DoctorOrganization) {
                orgDoctor = org.getUserAccountDirectory().getUserAccountListValues();
                //  System.out.println(orgDoctor);
                org1 = org;
            }

            for (UserAccount usr : orgDoctor) {
                for (WorkRequest wreqDoctor : org1.getWorkQueue().getWorkRequestList()) {

                    if (wreqDoctor.getSender().toString().equals(userAccount.toString()) && wreqDoctor.getReceiver().toString().equals(usr.toString())) {
                        matchedOrgDoctor.add(wreqDoctor.getReceiver());
                    }
                }
            }
            System.out.println(" MATCHED " + matchedOrgDoctor);

        }
        orgDoctor.removeAll(matchedOrgDoctor);
        populateDoctor();
    }

    public void populateDoctor() {

        DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();

        model.setRowCount(0);

        int count = 0;
        Organization org1 = null;
        System.out.println(orgDoctor + "ORG");
        for (UserAccount usr : orgDoctor) {
            Object[] row = new Object[2];
            row[0] = count;
            count++;
            row[1] = usr;

            //    row[2] = request.getStatus();
            model.addRow(row);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignToMe;
    private javax.swing.JTable doctorTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton viewHistoryBtn;
    // End of variables declaration//GEN-END:variables
}
