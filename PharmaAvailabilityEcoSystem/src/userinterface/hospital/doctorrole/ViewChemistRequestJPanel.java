/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.hospital.doctorrole;

import business.EcoSystem;
import business.enterprise.Enterprise;
import business.organization.Organization;
import business.organization.chemist.ManagerOrganization;
import business.organization.hospital.DoctorOrganization;
import business.organization.hospital.PatientOrganization;
import business.useraccount.UserAccount;
import business.workqueue.WorkRequest;
import business.workqueue.WorkRequestDrugs;
import commonutils.Constants;
import java.awt.CardLayout;
import java.awt.Font;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import userinterface.chemist.managerrole.AssignToSupplier;
import userinterface.chemist.workerrole.WorkerWorkAreaJPanel;

/**
 *
 * @author JAINHEMANT
 */
public class ViewChemistRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewChemistRequestJPanel
     */
    
    private JPanel userProcessContainer;
     private DoctorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem ecosystem;
    private static final Logger log = LogManager.getLogger(WorkerWorkAreaJPanel.class);
    
    public ViewChemistRequestJPanel(JPanel userProcessContainer, UserAccount account, DoctorOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        workRequestJTable.getTableHeader().setFont(new Font("Segoe UI", 1, 20));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignToMe = new javax.swing.JButton();
        sendToChemistManager = new javax.swing.JButton();
        approve = new javax.swing.JButton();
        reject = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxFilter = new javax.swing.JComboBox();
        backJButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(null);

        workRequestJTable.setBackground(new java.awt.Color(153, 255, 255));
        workRequestJTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        workRequestJTable.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Chemist ID", "Chemist Name", "Patient Id", "Doctor Name", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setGridColor(new java.awt.Color(0, 0, 0));
        workRequestJTable.setSelectionBackground(new java.awt.Color(153, 255, 255));
        workRequestJTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(120, 140, 740, 245);

        assignToMe.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignToMe.setText("Assign To Me");
        assignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToMeActionPerformed(evt);
            }
        });
        add(assignToMe);
        assignToMe.setBounds(120, 470, 220, 31);

        sendToChemistManager.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sendToChemistManager.setText("Send To Chemist Manager");
        sendToChemistManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToChemistManagerActionPerformed(evt);
            }
        });
        add(sendToChemistManager);
        sendToChemistManager.setBounds(540, 470, 270, 31);

        approve.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        approve.setText("Approve");
        approve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveActionPerformed(evt);
            }
        });
        add(approve);
        approve.setBounds(540, 390, 270, 31);

        reject.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        reject.setText("Reject");
        reject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectActionPerformed(evt);
            }
        });
        add(reject);
        reject.setBounds(540, 430, 270, 31);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Filter Status By:");
        add(jLabel2);
        jLabel2.setBounds(130, 520, 160, 22);

        jComboBoxFilter.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBoxFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFilterActionPerformed(evt);
            }
        });
        add(jComboBoxFilter);
        jComboBoxFilter.setBounds(260, 520, 130, 28);

        backJButton1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        backJButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/arrow-back-icon_1_40x40.png"))); // NOI18N
        backJButton1.setContentAreaFilled(false);
        backJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton1ActionPerformed(evt);
            }
        });
        add(backJButton1);
        backJButton1.setBounds(20, 40, 50, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/doctor.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        add(jLabel1);
        jLabel1.setBounds(-400, -10, 1640, 890);
    }// </editor-fold>//GEN-END:initComponents

    private void assignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToMeActionPerformed

        log.info("Request Assign to Doctor");
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getReceiver() == null) {
            if ((Constants.chemistCoworkerSendForApproval).equals(request.getStatus())) {
                request.setReceiver(userAccount);
                populateRequestTable();
            } else {
                JOptionPane.showMessageDialog(null, "Request is processed");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Already assigned to " + request.getReceiver());
            return;
        }
    }//GEN-LAST:event_assignToMeActionPerformed

    private void sendToChemistManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToChemistManagerActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
//        if (!(request.getStatus().equals(Constants.ManagerApprove) || request.getStatus().equals(Constants.chemistCoworkerSendForApproval))) {
        if (request.getStatus().equals(Constants.ManagerReject) || request.getStatus().equals(Constants.chemistCoworkerRequestCreated)
                || request.getStatus().equals(Constants.rejectedByLegal) || request.getStatus().equals(Constants.orderCannotBeFullfilled)) {
            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof ManagerOrganization) {
                    org = organization;
                    org.getWorkQueue().getWorkRequestList().add(request);
                }
            }
            request.setStatus(Constants.chemistCoworkerSendForApproval);
            log.info("Request send for Manager's Approval");
            populateRequestTable();
        } else {
            JOptionPane.showMessageDialog(null, "Already request send");
            return;
        }


//        // TODO add your handling code here:
//        int selectedRow = workRequestJTable.getSelectedRow();
//
//        if (selectedRow < 0) {
//            JOptionPane.showMessageDialog(null, "Please select row");
//            return;
//        }
//
//        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
//        //        if (!(Constants.sentToSupplier).equalsIgnoreCase(request.getStatus())) {
//            //            if (!(Constants.ManagerApprove).equalsIgnoreCase(request.getStatus())) {
//                //                JOptionPane.showMessageDialog(null, "Request Approved can only be send to Supplier");
//                //                return;
//                //            } else {
//                if (request.getReceiver() == userAccount) {
//                    if ((Constants.ManagerApprove).equalsIgnoreCase(request.getStatus())) {
//                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//                        userProcessContainer.add("ChooseChemist", new AssignToSupplier(userProcessContainer, ecosystem, request, this.enterprise));
//                        layout.next(userProcessContainer);
//                        log.info("Request send to Chemist");
//                    } else {
//                        JOptionPane.showMessageDialog(null, "Invalid action.");
//                        return;
//                    }
//                } else {
//                    JOptionPane.showMessageDialog(null, "Request not assign to you.");
//                    return;
//                }
    }//GEN-LAST:event_sendToChemistManagerActionPerformed

    private void approveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveActionPerformed
        // TODO add your handling code here:
        log.info("Request Approved by Doctor");
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        if (request.getReceiver() == userAccount) {
            if (!request.getStatus().equalsIgnoreCase(Constants.ManagerApprove)) {
                request.setStatus(Constants.ManagerApprove);
                JFrame frame = new JFrame();
                String message = (String) JOptionPane.showInputDialog(frame,
                    "Enter the message",
                    Constants.ManagerApprove + " message",
                    JOptionPane.OK_CANCEL_OPTION);
                request.setMessage(message);
                populateRequestTable();
            } else {
                JOptionPane.showMessageDialog(null, "Request already approved.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Assign request to you.");
        }
    }//GEN-LAST:event_approveActionPerformed

    private void rejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
            return;
        }

        WorkRequestDrugs request = (WorkRequestDrugs) workRequestJTable.getValueAt(selectedRow, 0);
        if ((Constants.chemistCoworkerSendForApproval).equals(request.getStatus())) {
            if (request.getReceiver() == userAccount) {
                request.setStatus(Constants.ManagerReject);
                JFrame frame = new JFrame();
                String message = (String) JOptionPane.showInputDialog(frame,
                    "Enter the message",
                    Constants.ManagerReject + " message",
                    JOptionPane.OK_CANCEL_OPTION);
                request.setMessage(message);

                organization.getWorkQueue().getWorkRequestList().remove(request);
                populateRequestTable();
            } else {
                JOptionPane.showMessageDialog(null, "Assign request to you.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Request is processed");
        }

        //WorkRequestDrugs wr= request.getSender().getWorkQueue().getWorkRequestList().stream().filter(x -> x==request).findFirst().get();
    }//GEN-LAST:event_rejectActionPerformed

    private void jComboBoxFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFilterActionPerformed
        // TODO add your handling code here:
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(((DefaultTableModel) workRequestJTable.getModel()));
        if (jComboBoxFilter.getSelectedItem() != null) {
            if (!jComboBoxFilter.getSelectedItem().toString().equalsIgnoreCase("All")) {
                sorter.setRowFilter(RowFilter.regexFilter(jComboBoxFilter.getSelectedItem().toString()));
                workRequestJTable.setRowSorter(sorter);
            } else {
                workRequestJTable.setRowSorter(null);
            }
        }
    }//GEN-LAST:event_jComboBoxFilterActionPerformed

    private void backJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton1ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton1ActionPerformed

    
     public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            WorkRequestDrugs workRequestDrugs = (WorkRequestDrugs) request;
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getStatus();
            row[2] = request.getSender();
            row[3] = request.getReceiver();
            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approve;
    private javax.swing.JButton assignToMe;
    private javax.swing.JButton backJButton1;
    private javax.swing.JComboBox jComboBoxFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reject;
    private javax.swing.JButton sendToChemistManager;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
